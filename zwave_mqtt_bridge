#!/usr/bin/env python

"""Publish ZWave Multisensor events to MQTT.

Connects to a Z-Wave controller using python-openzwave (use the --device
option to specify a path to the device).  For any multilevel sensor devices,
sets their reporting interval to 60s (assuming they have a "Group 1 Reporting
Interval" setting, which the Aeotec MultiSensor 6 does), and then publishes a
JSON message containing sensor data whenver it is received containing any of
temperature, relative humidity, luminnance, or UV level.

Tested so far with a simple Z-Wave network with two Aeotec MultiSensor 6
devices only.
"""

import os.path
import sys
import time
import signal
import json
import argparse
import logging

import paho.mqtt.client as mqtt

# This is a result of python-openzwave doing the same thing:
if sys.hexversion >= 0x3000000:
    from pydispatch import dispatcher
else:
    from louie import dispatcher

from openzwave.option import ZWaveOption
from openzwave.network import ZWaveNetwork
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

logging.basicConfig(level=logging.INFO)

EXIT = False

class DeviceWatcher(FileSystemEventHandler):
    def __init__(self, device, network):
        self.device = device
        self.network = network
        super(DeviceWatcher, self).__init__()

    def on_deleted(self, event):
        if event.src_path == self.device:
            self.network.stop()
        print("Deleted, %s" % str(event))

    def on_created(self, event):
        if event.src_path == self.device:
            self.network.start()
        print("Create, %s" % str(event))

def main():
    # Parse args:
    parser = argparse.ArgumentParser(
        description="MQTT interface to Z-Wave sensors.")
    parser.add_argument("mqtt_host", default="localhost", type=str,
                        help="MQTT host")
    parser.add_argument("-U", default=None, type=str, dest="mqtt_user",
                        help="MQTT username")
    parser.add_argument("-p", default=None, type=str, dest="mqtt_pass",
                        help="MQTT password")
    parser.add_argument("-d", "--device", default="/dev/ttyACM0",
                        help="Path to Z-Stick device")
    parser.add_argument('-u', default='.', dest="user_path",
                        help="Path to write user files (e.g. current Z-Wave "
                             "configursation")
    parser.add_argument("--basetopic", default="zwave", type=str,
                        help="Base topic to publish/subscribe to")
    args = parser.parse_args()

    # Set up MQTT
    mqtt_client = mqtt.Client()
    if args.mqtt_user and args.mqtt_pass:
        mqtt_client.username_pw_set(args.mqtt_user, args.mqtt_pass)

    updates_basetopic = args.basetopic + "/updates/"
    set_basetopic = args.basetopic + "/set"
    refresh_basetopic = args.basetopic + "/refresh"

    # Control commands:
    def on_message(client, userdata, msg):
        print("- %s: %s" % (msg.topic, msg.payload))

        try:
            # Setting values:
            if msg.topic.startswith(set_basetopic):
                # Control message: get the node ID:
                node_id = int(msg.topic[len(set_basetopic):].lstrip('/'))
                data = json.loads(msg.payload.decode())
                for value in list(network.nodes[node_id].get_values().values()):
                    if value.label in data:
                        value.data = data[value.label]
            # Refresh values:
            elif msg.topic.startswith(refresh_basetopic):
                node_id = int(msg.topic[len(refresh_basetopic):].lstrip('/'))
                data = json.loads(msg.payload.decode())
                for value in list(network.nodes[node_id].get_values().values()):
                    if value.label in data:
                        value.refresh()
        except Exception as e:
            print("Error processing message: %s" % e)

    def on_connect(client, userdata, flags, rc):
        try:
            if not rc:
                client.subscribe(set_basetopic + '/#')
                client.subscribe(refresh_basetopic + '/#')
        except Exception as e:
            print("Error connecting: %s" % str(e))

    mqtt_client.on_connect = on_connect
    mqtt_client.on_message = on_message
    mqtt_client.connect(args.mqtt_host, port=1883)

    # Start MQTT thread in background: although we don't subscribe to events
    # this is useful for automatically reconnecting to the service when it goes
    # down.
    mqtt_client.loop_start()

    # Initialise openzwave.
    zw_options = ZWaveOption(args.device, user_path=args.user_path)
    zw_options.set_console_output(False)
    zw_options.lock()
    network = ZWaveNetwork(zw_options)
    network.start()

    # Disconnect/reconnect when the device node goes away/re-appears.
    observer = Observer()
    observer.schedule(DeviceWatcher(args.device, network), os.path.dirname(args.device))
    observer.start()

    print("Waiting for network")
    while network.state != network.STATE_READY:
        time.sleep(1)

    print("Network ready")

    # Connect to events
    def value_updated(network, node, value):
        try:
            print("%s update: %s %f" % (value.label, updates_basetopic + str(node.node_id), value.data))
            mqtt_client.publish(updates_basetopic + str(node.node_id),
                                payload=json.dumps({value.label: value.data}))
        except Exception as e:
            print("Error %s" % str(e))
    def node_updated(network, node):
        print("Node update %s " % str(node))

    def sigint_handler(sig, frame):
        global EXIT
        EXIT = True
    signal.signal(signal.SIGINT, sigint_handler)
    dispatcher.connect(value_updated, ZWaveNetwork.SIGNAL_VALUE)
    dispatcher.connect(node_updated, ZWaveNetwork.SIGNAL_NODE)

    # Do some initial setup.  This should be in configuration ideally.
    for node in list(network.nodes.values()):
        print(node)
        if not ("COMMAND_CLASS_SENSOR_MULTILEVEL" in
                node.command_classes_as_string):
            continue

        # Hack to find radiator valve:
        if ('COMMAND_CLASS_SWITCH_MULTILEVEL' in
                node.command_classes_as_string):
            interval = 600
        else:
            interval = 60
        for value in list(node.get_values().values()):
            if value.label == "Command Options" and \
                    "COMMAND_CLASS_SENSOR_MULTILEVEL" in node.command_classes_as_string:
                value.data = 'Binary Sensor Report'
            if value.label == "Wake-up Interval":
                value.data = interval
            if value.label == "Group 1 Interval":
                # Only relevant on battery
                value.data = interval

    # Loop until we're told to exit:
    print("Running: Ctrl+C to exit.")
    while not EXIT:
        signal.pause()
    dispatcher.disconnect(value_updated, ZWaveNetwork.SIGNAL_VALUE)
    observer.stop()

    mqtt_client.loop_stop()

if __name__ == "__main__":
    main()
